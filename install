#!/bin/bash

# Install MakeJames/dotfiles in local system.
# LICENCE: MIT <https://github.com/MakeJames/dotfiles/blob/main/LICENCE>

set -o errexit
set -o nounset
set -o pipefail

work_path=$(dirname "$(readlink -f "$0")")
readonly script_name="${0##*/}"

readonly options="h,m"
readonly options_long="help,minimal,debug"
readonly parse_options_err="81"

# Set default flags
debug_flag=""
minimal=""
all=""


usage () {
    cat <<USAGE_TEXT
MakeJames Dotfiles install.
Usage: ${script_name} [-h | --help]
DESCRIPTION
    Installation script for MakeJames Dotfiles.
OPTIONS:

-m, --minimal
        Install minimal configuration files if available.

-h, --help
        Print this help and exit.
--debug
        Print additional informational and debug statements
USAGE_TEXT
}

log () {
    local msg="${1}"
    if (( "${debug_flag}" > 0)); then
        echo "${msg}"
    fi
}

raise () {
    local -r msg="${1}"
    local -r code="${2:-90}"
    echo "${msg}" >&2
    exit "${code}"
}

setup () {
    mkdir -p "${HOME}"/Profile/archive
}

archive () {
    log "moving old ${1}"
    mv "${HOME}"/"${1}" \
       "${HOME}"/Profile/archive/"${1}"-"$(date '+%Y-%m-%d-%H-%M-%S')"
}

parse_options () {
    local -r args=("${@}")
    local opts
    opts=$(getopt --options "${options}" --long "${options_long}" -- "${args[@]}" 2> /dev/null) \
        || {
            raise "error: parsing options" "${parse_options_err}"
    }

    eval set -- "${opts}"

    while true; do
        case "${1}" in
            --help|-h)
                usage
                exit 0
                ;;
            --debug)
                debug_flag=1
                shift
                ;;
            *)
                break
                ;;
             esac
        done
}

parse_options "${@}"

setup

link_files () {
    local path="${1}"
    local files

    files=$(ls -Ap ${path} | grep -v /)

    set -- "${files}"

    for file in ${files}; do
        log "Updating ${file}"
        continue # Prevent links for now.

        if [ -f "${HOME}"/"${file}" ]; then
            archive "${file}"
        fi

        if [ -L "${HOME}"/"${file}" ]; then
            archive "${file}"
        fi

        ln "${path}"/"${file}" "${HOME}"/"${file}"
    done
}

_install () {
    local -r paths="${@}"
    set -- "${paths}"
    for path in ${paths}; do
        log "Updating ${path}"
        link_files "${path}"
    done
}
