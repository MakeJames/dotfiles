#!/bin/bash

# Install MakeJames/dotfiles in local system.
# LICENCE: MIT <https://github.com/MakeJames/dotfiles/blob/main/LICENCE>

set -o errexit
set -o nounset
set -o pipefail

work_path=$(dirname "$(readlink -f "$0")")
readonly script_name="${0##*/}"

readonly options="a,h,m"
readonly options_long="all,help,minimal,debug,bash,vim"
readonly parse_options_err="81"

# Set default flags
debug_flag=
minimal=
all=

bash=
vim=
# bin=


usage () {
    cat <<USAGE_TEXT
MakeJames Dotfiles install.
Usage: ${script_name} [-h | --help]
DESCRIPTION
    Installation script for MakeJames Dotfiles.
OPTIONS:

Configuration files
--all
        Install all dotfiles
--bash
        Install bash specific dotfiles.
--vim
        Install vim specific dotfiles.

Options
-m, --minimal
        Install minimal configuration files if available.

Additional settings
-h, --help
        Print this help and exit.
--debug
        Print additional informational and debug statements
USAGE_TEXT
}

log () {
    local msg="${1}"
    if [ "${debug_flag}" = "true" ]; then
        echo "${msg}"
    fi
}

raise () {
    local -r msg="${1}"
    local -r code="${2:-90}"
    echo "${msg}" >&2
    usage
    exit "${code}"
}

setup () {
    mkdir -p "${HOME}"/Profile/archive
}

archive () {
    log "moving old ${1}"
    mv "${HOME}"/"${1}" \
       "${HOME}"/Profile/archive/"${1}"-"$(date '+%Y-%m-%d-%H-%M-%S')"
}

parse_options () {
    local -r args=("${@}")
    local opts
    opts=$(getopt --options "${options}" --long "${options_long}" -- "${args[@]}" 2> /dev/null) \
        || {
            raise "error: parsing options" "${parse_options_err}"
    }

    eval set -- "${opts}"

    while true; do
        case "${1}" in
            --all|-a)
                all="true"
                shift
                ;;
            --bash)
                bash="true"
                shift
                ;;
            --vim)
                vim="true"
                shift
                ;;
            --help|-h)
                usage
                exit 0
                ;;
            --minimal|-m)
                minimal="true"
                shift
                ;;
            --debug)
                debug_flag="true"
                shift
                ;;
            *)
                break
                ;;
             esac
        done
}

parse_options "${@}"

setup

link_files () {
    local path="${1}"

    shopt -s dotglob

    for file in "${path}"/*; do
        if [ -d "${file}" ]; then
            log "${file} is a directory, skipping."
            continue
        fi
        file_name="$(basename "${file}")"

        log "Updating ${file}"

        if [ -f "${HOME}"/"${file_name}" ]; then
            archive "${file_name}"
        fi

        if [ -L "${HOME}"/"${file_name}" ]; then
            archive "${file_name}"
        fi

        ln "${file}" "${HOME}"/"${file_name}"
    done
}

if [ "${all}" = "true" ]; then
    log "Updating all dotfiles."
    bash="true"
    vim="true"
fi

if [ "${bash}" = "true" ]; then
    log "Updating bash files."
    bash_files="${work_path}/bash"

    if [ "${minimal}" = "true" ]; then
        bash_files="${work_path}/bash/minimal"
    fi

    link_files "${bash_files}"
fi

if [ "${vim}" = "true" ]; then
    log "Updating vim files."
    vim_files="${work_path}/vim"

    if [ "${minimal}" = "true" ]; then
        vim_files="${work_path}/vim/minimal"
    fi

    link_files "${vim_files}"
fi
