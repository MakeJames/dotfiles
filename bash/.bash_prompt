#!/bin/bash

# =~=~=~=~=~=~=~=~=~=~=~=~=
# MakeJames: command prompt
# =~=~=~=~=~=~=~=~=~=~=~=~=

# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# Via https://github.com/jessfraz/dotfiles


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp rxvt-unicode-256color >/dev/null 2>&1; then
    export TERM='rxvt-unicode';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;


# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

reset=$(tput sgr0);
bold=$(tput bold);
# black=$(tput setaf 236);
red=$(tput setaf 168);
green=$(tput setaf 114);
yellow=$(tput setaf 180);
blue=$(tput setaf 75);
purple=$(tput setaf 176);
# cyan=$(tput setaf 73);
# white=$(tput setaf 188);
grey=$(tput setaf 241);
light_grey=$(tput setaf 247);
# dark_grey=$(tput setaf 239);

local_git_changes() {
    echo -e "{s}"
}

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then
        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
                git update-index --really-refresh -q &> /dev/null;
            fi;

                # Check for uncommitted changes in the index.
                if ! git diff --quiet --ignore-submodules --cached; then
                    s+='+';
                fi;

                # Check for unstaged changes.
                if ! git diff-files --quiet --ignore-submodules --; then
                    s+='!';
                fi;

                # Check for untracked files.
                if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                    s+='?';
                fi;

                # Check for stashed files.
                if git rev-parse --verify refs/stash &>/dev/null; then
                    s+='$';
                fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                    git rev-parse --short HEAD 2> /dev/null || \
                    echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${blue}${s}";
    else
        return;
    fi;
}

# Update Cloud settings
cloud=""
if [[ -f /proc/cpuinfo ]] && grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
    cloud="☁️ "
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${green}";
fi;

hostStyle="${purple}"
sshConnection=""
# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${purple}";
    sshConnection="-⚡"
fi;

PS1="\\[\\033]0;\\w\\007\\]";
PS1+="\\n";
PS1+="\\[${bold}${grey}\\]\\d \\t ▏\\[${reset}\\]"; # date and time
PS1+="\\[${blue}\\]\\w"; # working directory
PS1+="\$(prompt_git \"${light_grey} on ${yellow}\")"; # Git repository details
PS1+="\\[${bold}\\]\\n"; # newline
PS1+="\\[${userStyle}\\]\\u"; # username
PS1+="\\[${light_grey}\\] @ ";
PS1+="\\[${hostStyle}\\]${cloud}\\h${sshConnection}"; # host
PS1+="\\n";
PS1+="\\[${light_grey}\\]\$ \\[${reset}\\]"; # `$` (and reset color)
export PS1;

PS2="\\[${yellow}\\]→ \\[${reset}\\]";
export PS2;

# vim: filetype=sh
